[
["index.html", "Reliable Construction of Matrix Population Models from Demographic Information Preface", " Reliable Construction of Matrix Population Models from Demographic Information Bruce E. Kendall 2019-09-18 Preface Matrix population models are powerful tools for quantitatively integrating demographic and life history information to address ecological questions as well as prioritizing management for rare, harvested, or invasive species. The growth of empirical MPMs Getting MPMs just right can be tricky if one is not used to “thinking like a modeller.” Lots of published MPMs have errors (Kendall et al. 2019) The audience for this book is ecologists and conservation biologists whose focus is primarily empirical: you are used to collecting data and analyzing it statistically, but you are not well-versed in constructing and analyzing mathematical models. The first goal of this book is to provide a gentle tutorial, and introduce a new approach to MPM construction that keeps you, the biolgist, focused on events in the life cycle of your organism, and uses the computer to integrate all the pieces into the model. I start with the classic age-, size-, and stage-structured MPMs. This approach is then expanded to incorporate richer biological detail into the model, such as extended pregnancy or periods when the offspring is dependent on its parents for survival. "],
["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction MPMs: what they are and how they can be used Growth in MPM use Common pitfalls in MPM construction Nomenclature Software "],
["general-considerations.html", "Chapter 2 General Considerations", " Chapter 2 General Considerations "],
["age-structured-models.html", "Chapter 3 Age-Structured Models 3.1 The recipe 3.2 Example 3.3 Why use this recipe? 3.4 Sensitivity analyses", " Chapter 3 Age-Structured Models 3.1 The recipe 3.1.1 Ingredients For more details on data needs, see XXX, but in brief: A list of annual survival rates (the fraction of individuals that survive for a year), one for each age. Ideally, this will be survival from one birthay to the next (including from birth to the first birthday). If males and females have different survival rates, list the female values. We will call this list the vector \\(\\mathbf{p}\\), with elements \\(p_0\\), \\(p_1\\), \\(p_2\\), etc. A list of age-specific birth rates: For each parental age, the number of offspring per parent (counting both parents), or the number of female offspring produced by each female parent. We will call this list the vector \\(\\mathbf{b}\\), with elements \\(b_1\\), \\(b_2\\), etc. Newborns cannot reproduce, so there is no value of \\(b_0\\); if the age at first reproduction is less than one, then you will need a shorter timestep. Identify the maximum age, above which there is no survival. Call this age \\(m\\); while there may be a non-zero birth rate \\(b_m\\), \\(m\\)-year-olds do not survive to age \\(m+1\\), so \\(p_m = 0\\). When these are arranged in tabular form, it will look like part of a life table, which you may recall from undergraduate ecology courses. In fact, these two lists provide all the information needed to construct the other columns of the life table; but we don’t need those to construct an MPM, so don’t pursue that further. Table 3.1: Age-specific survival and birth rates for the lizard Lacerta vivipara in the Netherlands (Strijbosch and Creemers 1988). Age in years (\\(x\\)) Female annual survival (\\(p_x\\)) Female offpring per female (\\(b_x\\)) 0 0.424 NA 1 0.726 0.040 2 0.513 1.470 3 0.361 2.065 4 0.175 2.440 5 0.700 3.250 6 0.286 3.250 7 NA 3.250 3.1.2 Construct the birth matrix, \\(\\mathbf{B}\\) Make an \\(m \\times m\\) identity matrix (with ones on the diagonal, and zeros everywhere else) Add an extra row on top, with the birth rates If \\(m=3\\), this would look like: \\[\\begin{equation} \\mathbf{B} = \\begin{pmatrix} b_1 &amp; b_2 &amp; b_3 \\\\ 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{pmatrix} \\end{equation}\\] 3.1.3 Construct the survival matrix, \\(\\mathbf{P}\\) Make an \\(m \\times m\\) matrix with the survival values on the diagonal, and zeros everywhere else Add an extra column of zeros on the right If \\(m=3\\), this would look like: \\[\\begin{equation} \\mathbf{P} = \\begin{pmatrix} p_0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; p_1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; p_2 &amp; 0 \\end{pmatrix} \\end{equation}\\] 3.1.4 Combine the birth and survival matrices into the projection matrix You have two choices here: the postbreeding census model (which we denote \\(\\mathbf{A_{post}}\\)), which takes the population immediately after the breeding season in one yeqr (including the newborns) and projects it to immediately after the breeding season the next year; the prebreeding census model (which we denote \\(\\mathbf{A_{pre}}\\)), which takes the population immediately before the breeding season in one yeqr (so that the youngest individuals are just about to reach their first birthday) and projects it to immediately before the breeding season the next year. Both versions model the same population; the only difference is when you peek in to see the population abundances. Here are the formulas: \\[\\begin{equation} \\begin{aligned} \\mathbf{A_{post}} &amp;= \\mathbf{B} \\mathbf{P}\\\\ \\mathbf{A_{pre}} &amp;= \\mathbf{P} \\mathbf{B} \\end{aligned} \\end{equation}\\] The formulas look similar, differing only in the order of multiplication. But remember that matrix multiplication is not commutative! For the \\(m=3\\) case above, these work out to: \\[\\begin{equation} \\begin{aligned} \\mathbf{A_{post}} &amp;= \\begin{pmatrix} p_0 b_1 &amp; p_1 b_2 &amp; p_2 b_3 &amp; 0\\\\ p_0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; p_1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; p_2 &amp; 0 \\end{pmatrix} \\\\ \\mathbf{A_{pre}} &amp;= \\begin{pmatrix} b_1 p_0 &amp; b_2 p_0 &amp; b_3 p_0 \\\\ p_1 &amp; 0 &amp; 0 \\\\ 0 &amp; p_2 &amp; 0 \\end{pmatrix} \\end{aligned} \\tag{3.1} \\end{equation}\\] 3.2 Example Let’s apply this to the snail life table in Table XXX. This model is large enough that I don’t want to calculate it by hand, so I’ll use R: px &lt;- c(0.424, 0.726, 0.513, 0.361, 0.175, 0.7, 0.286) # Survival bx &lt;- c(0.040, 1.470, 2.065, 2.440, 3.250, 3.250, 3.250) # Births m &lt;- 7 # Maximum age # Construct the birth matrix, B # A useful tool: diag(m) creates an m x m matrix with ones on the diagonal # and zeros everywhere else B &lt;- diag(m) # Make an m x m diagonal matrix B &lt;- rbind(bx, B) # Add an extra row on top, with the birth rates B ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## bx 0.04 1.47 2.065 2.44 3.25 3.25 3.25 ## 1.00 0.00 0.000 0.00 0.00 0.00 0.00 ## 0.00 1.00 0.000 0.00 0.00 0.00 0.00 ## 0.00 0.00 1.000 0.00 0.00 0.00 0.00 ## 0.00 0.00 0.000 1.00 0.00 0.00 0.00 ## 0.00 0.00 0.000 0.00 1.00 0.00 0.00 ## 0.00 0.00 0.000 0.00 0.00 1.00 0.00 ## 0.00 0.00 0.000 0.00 0.00 0.00 1.00 # Construct the survival matrix, P # A useful tool: diag(px) creates an m x m matrix with the values of px # on the diagonal and zeros everywhere else P &lt;- diag(px) P &lt;- cbind(P, 0) P ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] ## [1,] 0.424 0.000 0.000 0.000 0.000 0.0 0.000 0 ## [2,] 0.000 0.726 0.000 0.000 0.000 0.0 0.000 0 ## [3,] 0.000 0.000 0.513 0.000 0.000 0.0 0.000 0 ## [4,] 0.000 0.000 0.000 0.361 0.000 0.0 0.000 0 ## [5,] 0.000 0.000 0.000 0.000 0.175 0.0 0.000 0 ## [6,] 0.000 0.000 0.000 0.000 0.000 0.7 0.000 0 ## [7,] 0.000 0.000 0.000 0.000 0.000 0.0 0.286 0 Notice that the rownames of the matrix B are odd; it doesn’t really matter, but if you want things to be tidier, you can use this slightly more complex command (it also does both steps at once): B &lt;- matrix(c(bx, diag(m)), nrow = m + 1, ncol = m, byrow = TRUE) B ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## [1,] 0.04 1.47 2.065 2.44 3.25 3.25 3.25 ## [2,] 1.00 0.00 0.000 0.00 0.00 0.00 0.00 ## [3,] 0.00 1.00 0.000 0.00 0.00 0.00 0.00 ## [4,] 0.00 0.00 1.000 0.00 0.00 0.00 0.00 ## [5,] 0.00 0.00 0.000 1.00 0.00 0.00 0.00 ## [6,] 0.00 0.00 0.000 0.00 1.00 0.00 0.00 ## [7,] 0.00 0.00 0.000 0.00 0.00 1.00 0.00 ## [8,] 0.00 0.00 0.000 0.00 0.00 0.00 1.00 Now on to the final steps: # Make the postbreeding census model Apost &lt;- B %*% P Apost ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] ## [1,] 0.01696 1.06722 1.059345 0.88084 0.56875 2.275 0.9295 0 ## [2,] 0.42400 0.00000 0.000000 0.00000 0.00000 0.000 0.0000 0 ## [3,] 0.00000 0.72600 0.000000 0.00000 0.00000 0.000 0.0000 0 ## [4,] 0.00000 0.00000 0.513000 0.00000 0.00000 0.000 0.0000 0 ## [5,] 0.00000 0.00000 0.000000 0.36100 0.00000 0.000 0.0000 0 ## [6,] 0.00000 0.00000 0.000000 0.00000 0.17500 0.000 0.0000 0 ## [7,] 0.00000 0.00000 0.000000 0.00000 0.00000 0.700 0.0000 0 ## [8,] 0.00000 0.00000 0.000000 0.00000 0.00000 0.000 0.2860 0 # Make the prebreeding census model Apre &lt;- P %*% B Apre ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## [1,] 0.01696 0.62328 0.87556 1.03456 1.378 1.378 1.378 ## [2,] 0.72600 0.00000 0.00000 0.00000 0.000 0.000 0.000 ## [3,] 0.00000 0.51300 0.00000 0.00000 0.000 0.000 0.000 ## [4,] 0.00000 0.00000 0.36100 0.00000 0.000 0.000 0.000 ## [5,] 0.00000 0.00000 0.00000 0.17500 0.000 0.000 0.000 ## [6,] 0.00000 0.00000 0.00000 0.00000 0.700 0.000 0.000 ## [7,] 0.00000 0.00000 0.00000 0.00000 0.000 0.286 0.000 3.3 Why use this recipe? Now, these matrices don’t look that complex; why didn’t I tell you how to construct them directly, rather than constructing the intermediate birth and survival matrices? Look at the matrix elements on the top row of each matrix; these are called the fertility coefficients, and represent the reproducive component of the model. Look at how they are constructed from survival and birth rates: does this make sense to you? If it does not, don’t worry: it is not an implementation of biological intuition, but instead a bunch of bookkeeping. But first I would need to convince you that these are the right formulas; and then I would need to look over your shoulder and remind you to use them each time you constructed a model, because, like double-entry bookkeeping, it is easy to forget what to do unless you do it often. 3.4 Sensitivity analyses This book is about MPM construction, not the analysis of such models. Nevertheless, the construction of the annual projection matrix by way of separate birth and survival matrices creates a way to easily calculate the sensitivity and elasticity of the asymptotic growth rate (usually denoted \\(\\lambda\\)) to changes in the age-specific birth and death rates. Existing tools (e.g., the sensitivity() function in the popbio R package) can calculate sensitivities of \\(\\lambda\\) to changes in the elements of an annual projection matrix (\\(\\mathbf{A_{post}}\\) or \\(\\mathbf{A_{pre}}\\)). However, the matrix entries may be functions of multiple vital rates, and individual vital rates may appear in multiple matrix entries (see eqs. (3.1)). Extracting the sensitivities of \\(\\lambda\\) to vital rates from the sensitivities of \\(\\lambda\\) to matrix elements requires careful accounting, as well as the application of basic differential calculus; doing this by hand is tedious and error prone. Instead, we can make use of established procedures for sensitivy analysis of “periodic matrix products” (Caswell and Trevisan 1994). The recipe is as follows: Construct both the postbreeding census and prebreeding census projection matrices (\\(\\mathbf{A_{post}}\\) and \\(\\mathbf{A_{pre}}\\)). Use a standard toolkit to constuct the sensitivity matrices of the two projection matrices. We will call those \\(\\mathbf{S_A}^{\\text{(post)}}\\) and \\(\\mathbf{S_A}^{\\text{(pre)}}\\). Construct the transpose of the \\(\\mathbf{B}\\) and \\(\\mathbf{P}\\) matrices by swapping the rows and columns. We will call these \\(\\mathbf{B^T}\\) and \\(\\mathbf{P^T}\\). For the \\(m=3\\) example, these look like \\[\\begin{equation} \\mathbf{B^T} = \\begin{pmatrix} b_1 &amp; 1 &amp; 0 &amp; 0\\\\ b_2 &amp; 0 &amp; 1 &amp; 0\\\\ b_3 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix} \\end{equation}\\] and \\[\\begin{equation} \\mathbf{P^T} = \\begin{pmatrix} p_0 &amp; 0 &amp; 0\\\\ 0 &amp; p_1 &amp; 0\\\\ 0 &amp; 0 &amp; p_1\\\\ 0 &amp; 0 &amp; 0 \\end{pmatrix}. \\end{equation}\\] Matrix multiply \\(\\mathbf{P^T}\\) by \\(\\mathbf{S_A}^{\\text{(pre)}}\\). The top row in the resulting matrix contains the sensitivities of \\(\\lambda\\) to the age-specific birth rates. Matrix multiply \\(\\mathbf{B^T}\\) by \\(\\mathbf{S_A}^{\\text{(post)}}\\). The diagonal entries in the resulting matrix contains the sensitivities of \\(\\lambda\\) to the age-specific survival rates. 3.4.1 Example library(popbio) # This library includes tools for calculating lambda and matrix sensitivities # Confirm that our two A matrices give the same asymptotic growth rate lambda(Apost) ## [1] 0.9986679 lambda(Apre) ## [1] 0.9986679 # Calculate the sensitivity matrices Spost &lt;- sensitivity(Apost) Spre &lt;- sensitivity(Apre) # Do the matrix multiplication to calculate the sensitivities to survival Stemp1 &lt;- t(B) %*% Spost diag(Stemp1[, 1:m]) ## [1] 0.837520960 0.480823977 0.366397726 0.198614806 0.125950860 0.014929771 ## [7] 0.008135051 # Do the matrix multiplication to calculate the sensitivities to birth rates Stemp2 &lt;- t(P) %*% Spre Stemp2[1, ] ## [1] 0.1507669993 0.1096028394 0.0563012534 0.0203518625 0.0035663265 ## [6] 0.0024997584 0.0007158845 References "],
["stage-structured-models.html", "Chapter 4 Stage-Structured Models", " Chapter 4 Stage-Structured Models "],
["size-structured-models.html", "Chapter 5 Size-Structured Models", " Chapter 5 Size-Structured Models "],
["references.html", "References", " References "]
]
